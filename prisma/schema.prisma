generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  userOrganizations UserOrganization[]
  userProjects      UserProject[]

  @@index([email])
  @@map("users")
}

model VerificationToken {
  id         String    @id @default(cuid())
  identifier String
  token      String    @unique
  expires    DateTime
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Organization {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  userOrganizations UserOrganization[]
  projects          Project[]

  @@map("organizations")
}

model UserOrganization {
  id             String               @id @default(cuid())
  userId         String               @map("user_id")
  organizationId String               @map("organization_id")
  role           UserOrganizationRole @default(OWNER)
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime?            @updatedAt @map("updated_at")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@map("user_organizations")
}

model Project {
  id             String    @id @default(cuid())
  name           String
  organizationId String    @map("organization_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")

  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userProjects UserProject[]
  lists        List[]

  @@unique([name, organizationId])
  @@map("projects")
}

model UserProject {
  id        String          @id @default(cuid())
  userId    String          @map("user_id")
  projectId String          @map("project_id")
  role      UserProjectRole @default(OWNER)
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime?       @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@map("user_projects")
}

model List {
  id        String   @id @default(cuid())
  name      String
  type      ListType
  projectId String   @map("project_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([type, projectId, name])
  @@index([projectId])
  @@map("lists")
}

enum UserOrganizationRole {
  OWNER
}

enum UserProjectRole {
  OWNER
}

enum ListType {
  TODO
  DOING
  DONE
}
